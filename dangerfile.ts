import { danger, warn, fail, message } from 'danger';
import { prettier } from 'danger-plugin-prettier';

// Verifica a descri√ß√£o da PR
if (!danger.github.pr.body || danger.github.pr.body.length < 10) {
  fail(
    'A descri√ß√£o da PR est√° muito curta. Por favor, adicione mais detalhes.',
  );
}

// Verifica mudan√ßas no c√≥digo e nos testes
const hasTestChanges = danger.git.modified_files.some((file) =>
  file.includes('test'),
);
const hasSrcChanges = danger.git.modified_files.some((file) =>
  file.includes('src'),
);

if (hasSrcChanges && !hasTestChanges) {
  warn('Parece que voc√™ alterou o c√≥digo, mas n√£o atualizou os testes.');
}

// Verifica altera√ß√µes em arquivos importantes
const sensitiveFiles = ['package.json', 'ormconfig.ts', 'tsconfig.json'];
sensitiveFiles.forEach((file) => {
  if (danger.git.modified_files.includes(file)) {
    message(
      `‚ö†Ô∏è O arquivo **${file}** foi modificado. Certifique-se de que essa mudan√ßa foi intencional.`,
    );
  }
});

// Verifica se h√° mudan√ßas em depend√™ncias no package.json
const packageJsonChanged = danger.git.modified_files.includes('package.json');
if (packageJsonChanged) {
  const addedDeps = danger.git.created_files.filter((file) =>
    file.includes('package.json'),
  );
  if (addedDeps.length) {
    message(
      'üîß Depend√™ncias foram adicionadas ou alteradas em `package.json`. Verifique se todas s√£o necess√°rias.',
    );
  }
}

// Verifica se o c√≥digo est√° bem formatado (com Prettier)
const formattedFiles = danger.git.modified_files.filter(
  (file) => file.endsWith('.ts') || file.endsWith('.tsx'),
);
if (
  formattedFiles.length &&
  !formattedFiles.every((file) => file.match(/.*\.ts$/))
) {
  warn(
    '‚ö†Ô∏è Alguns arquivos TypeScript podem n√£o estar corretamente formatados. Execute o Prettier.',
  );
}

// Rodar o plugin Prettier para verificar a formata√ß√£o
prettier();

// Verifica se h√° `console.log` no c√≥digo
const modifiedFiles = [
  ...danger.git.modified_files,
  ...danger.git.created_files,
];
const logFiles = modifiedFiles.filter(
  (file) => file.endsWith('.ts') || file.endsWith('.js'),
);

logFiles.forEach(async (file) => {
  const fileContent = await danger.github.utils.fileContents(file);
  if (fileContent.includes('console.log')) {
    warn(`Evite usar \`console.log\` no c√≥digo. Arquivo afetado: **${file}**`);
  }
});

// Verifica se os commits seguem a conven√ß√£o
const commitMessages = danger.git.commits.map((commit) => commit.message);
const conventionalCommitRegex = /^(\w+)(\([a-z0-9-_]+\))?:\s[A-Z].+/;
commitMessages.forEach((commitMessage) => {
  if (!conventionalCommitRegex.test(commitMessage)) {
    warn(
      `‚ö†Ô∏è O commit "${commitMessage}" n√£o segue o formato convencional. Utilize algo como "feat: adicionar nova funcionalidade" ou "fix: corrigir bug".`,
    );
  }
});
